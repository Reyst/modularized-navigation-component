apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.metapoger.modularized_navigation_component"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "env"

    productFlavors {
        mock {
        }
        dev {
        }
        prod {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":home_screen")
    implementation project(":core")
    implementation project(":navigation")
    implementation project(":onboarding")
    implementation project(":settings")
    implementation project(":splash")
    implementation project(":user_details")
    implementation project(":users_list")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'

    implementation "androidx.navigation:navigation-fragment-ktx:$NAV_VERSION"
    implementation "androidx.fragment:fragment-ktx:$FRAGMENT_VERSION"
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('generateSafeArgs')) {
        println("Added dependency to task " + task.name)
        task.doLast {
            fileTree(appNavigation)
                    .filter { it.isFile() && it.name.contains("Directions") }
                    .forEach { file ->
                        println("Changing ${file.name} navigation file")
                        if (file.exists()) {
                            def lines = file.readLines()
                            lines = lines.plus(2, "import com.metapoger.navigation.R")
                            file.text = lines.join("\n")
                        }
                    }
            move(file("$appNavigation"), file("$navigationPath"))
        }
    }
}

private static void move(File sourceFile, File destFile) {
    if (sourceFile.isDirectory()) {
        File[] files = sourceFile.listFiles();
        assert files != null;
        for (File file : files) move(file, new File(destFile, file.getName()));
        if (!sourceFile.delete()) throw new RuntimeException();
    } else {
        if (!destFile.getParentFile().exists())
            if (!destFile.getParentFile().mkdirs()) throw new RuntimeException();
        if (!sourceFile.renameTo(destFile)) throw new RuntimeException();
    }
}